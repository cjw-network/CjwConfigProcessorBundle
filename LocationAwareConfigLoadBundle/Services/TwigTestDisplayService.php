<?php


namespace App\CJW\LocationAwareConfigLoadBundle\Services;


use App\CJW\LocationAwareConfigLoadBundle\src\CustomValueStorage;
use App\CJW\LocationAwareConfigLoadBundle\src\LoadInitializer;
use Psr\Cache\InvalidArgumentException;
use Symfony\Component\Cache\Adapter\PhpFilesAdapter;
use Symfony\Contracts\Cache\ItemInterface;
use Twig\Extension\AbstractExtension;
use Twig\Extension\GlobalsInterface;

/**
 * TODO: Move the entire functionality and initialisation of the custom loading process out of the Twig-Service-Realm and into a controller
 *
 * Class TwigTestDisplayService
 * @package App\CJWLocationAwareConfigLoadBundle\Services
 */
class TwigTestDisplayService extends AbstractExtension implements GlobalsInterface
{

    /** @var LoadInitializer A custom kernel that initiates the entire custom loading process. */
    private $customConfigLoader;

    /** @var array An array which not only stores the parameters, but also the paths they have been read from (including the values set there) */
    public $parametersAndLocations;

    /** @var PhpFilesAdapter A cache which is supposed to store the parameters that have been parsed. */
    private $cache;

    public function __construct()
    {
        $this->cache = new PhpFilesAdapter();
        // The loader is created basically the same way as the typical kernel would
        $this->customConfigLoader = new LoadInitializer($_SERVER['APP_ENV'], (bool)$_SERVER['APP_DEBUG']);

        // After the booting process of the LoadInitializer, the parameters should be present
        $this->parametersAndLocations = CustomValueStorage::getParametersAndTheirLocations();

        try {
            // TODO Revamp this, maybe?:
            // If parameters are returned (meaning that the kernel has booted and thus new parameters could have entered), delete the parameters present
            if (is_array($this->parametersAndLocations) && count($this->parametersAndLocations) > 0) {
                $this->cache->delete("parametersAndLocations");
            }

            // Then store the presumably "new" parameters
            $this->parametersAndLocations = $this->cache->get("parametersAndLocations", function (ItemInterface $item) {
                $item->set($this->parametersAndLocations);

                return $this->parametersAndLocations;
            });
        }catch (InvalidArgumentException $e) {
        }
    }

    /**
     * Function to return global variables to be used in twig templates
     */
    public function getGlobals(): array
    {
        return [
            "cjw_param_location" => $this->parametersAndLocations?? [],
        ];
    }

    /**
     * @inheritDoc
     */
    public function getFunctions()
    {
        return parent::getFunctions(); // TODO: Change the autogenerated stub
    }
}
